import User from '../../models/userModel.js'
import { sendMail, passwordResetToken } from '../../utils/sendEmail.js'
import bcrypt from 'bcrypt'


//request for password reset
export const passwordResetRequest = async (req, res) => {
    const {email} = req.body

    try{
      const user = await User.findOne({ email });
      if (!user) {
        res
          .status(400)
          .json({ message: "User not found, please register first" });
        return;
      }

      //save token generated by crypto and expiry time to user fields
      const { resetToken, expiresAt } = passwordResetToken();
      user.passwordResetToken = resetToken;
      user.passwordResetExpires = expiresAt;

      await user.save();

      await sendMail({
        mailFrom: `weSELL ${process.env.EMAIL_USER}`,
        mailTo: email,
        subject: "Reset Password Request",
        body: `
            <p>click on the link to reset your password</p>
            <a href="https://localhost:3000/pasword/reset/${resetToken}">Reset Password</a>
          `,
      });
      res.status(200).json({ message: "Password reset request sent successfully" });
    } catch(err){
        console.log(err.message)
    }
}


//reset password
export const passwordReset = async (req, res) => { 
    const { resetToken, newPassword } = req.body
    
    try {
        const user = await User.findOne({ passwordResetToken: resetToken, passwordResetExpires: { $gt: Date.now() } })
        if (!user) return res.status(400).json({ message: "Password reset token is invalid or expired" })
        
        user.password = bcrypt.hashSync(newPassword, 10)
        user.passwordResetToken = null
        user.passwordResetExpires = null

       await user.save()
       res.status(200).json({ message: "Password reset successfully, proceed to login with your new password" })  
    } catch (error) {
        console.log(error)
    }

}